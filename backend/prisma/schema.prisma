generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique
  password           String
  name               String
  role               UserRole
  status             UserStatus
  createdAt          DateTime             @default(now()) @map("created_at")
  
  // Relations
  enrollments        Enrollment[]         // Student enrollments
  teachingClasses    Class[]              // Classes taught by teacher
  submittedAssignments AssignmentSubmission[] // Assignments submitted by student

  @@map("users")
}

model Class {
  id              Int               @id @default(autoincrement())
  name            String
  description     String?
  teacherId       Int               @map("teacher_id")
  createdAt       DateTime          @default(now()) @map("created_at")
  
  // Relations
  teacher         User              @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  enrollments     Enrollment[]
  courseMaterials CourseMaterial[]
  assignments     Assignment[]

  @@map("classes")
}

model Enrollment {
  id            Int             @id @default(autoincrement())
  classId       Int             @map("class_id")
  studentId     Int             @map("student_id")
  status        EnrollmentStatus
  enrolledAt    DateTime        @default(now()) @map("enrolled_at")
  
  // Relations
  class         Class           @relation(fields: [classId], references: [id], onDelete: Cascade)
  student       User            @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([classId, studentId])
  @@map("enrollments")
}

model CourseMaterial {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  classId     Int       @map("class_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Relations
  class       Class     @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@map("course_materials")
}

model Assignment {
  id                Int                   @id @default(autoincrement())
  title             String
  description       String
  classId           Int                   @map("class_id")
  dueDate           DateTime              @map("due_date")
  createdAt         DateTime              @default(now()) @map("created_at")
  updatedAt         DateTime              @updatedAt @map("updated_at")
  
  // Relations
  class             Class                 @relation(fields: [classId], references: [id], onDelete: Cascade)
  submissions       AssignmentSubmission[]

  @@map("assignments")
}

model AssignmentSubmission {
  id            Int       @id @default(autoincrement())
  assignmentId  Int
  studentId     Int
  content       String
  grade         Int?
  feedback      String?
  submittedAt   DateTime  @default(now())
  gradedAt      DateTime?
  
  // Relations
  assignment    Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student       User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  // Constraints
  @@unique([assignmentId, studentId])
  @@map("assignment_submissions")
}

enum UserRole {
  admin
  teacher
  student
}

enum UserStatus {
  pending
  approved
  rejected
}

enum EnrollmentStatus {
  pending
  approved
  rejected
}
